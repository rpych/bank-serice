// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `client.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package clientOperations;

public abstract class _PremiumAccountDisp extends Ice.ObjectImpl implements PremiumAccount
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::clientOperations::Account",
        "::clientOperations::PremiumAccount"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[2];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[2];
    }

    public static String ice_staticId()
    {
        return __ids[2];
    }

    public final String getAccessKey()
    {
        return getAccessKey(null);
    }

    public final String getAccountInfo()
    {
        return getAccountInfo(null);
    }

    public final boolean isPremiumAccount(String PESEL)
    {
        return isPremiumAccount(PESEL, null);
    }

    public final double getCreditCostInForeignCurrency(int amount, currency curr, float period)
    {
        return getCreditCostInForeignCurrency(amount, curr, period, null);
    }

    public final double getCreditCostInNativeCurrency(int amount, currency curr, float period)
    {
        return getCreditCostInNativeCurrency(amount, curr, period, null);
    }

    public final boolean isClientAllowedToGetCredit(int amount, currency curr, float period)
    {
        return isClientAllowedToGetCredit(amount, curr, period, null);
    }

    public static Ice.DispatchStatus ___isClientAllowedToGetCredit(PremiumAccount __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int amount;
        currency curr;
        float period;
        amount = __is.readInt();
        curr = currency.__read(__is);
        period = __is.readFloat();
        __inS.endReadParams();
        boolean __ret = __obj.isClientAllowedToGetCredit(amount, curr, period, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeBool(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getCreditCostInNativeCurrency(PremiumAccount __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int amount;
        currency curr;
        float period;
        amount = __is.readInt();
        curr = currency.__read(__is);
        period = __is.readFloat();
        __inS.endReadParams();
        double __ret = __obj.getCreditCostInNativeCurrency(amount, curr, period, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeDouble(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getCreditCostInForeignCurrency(PremiumAccount __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int amount;
        currency curr;
        float period;
        amount = __is.readInt();
        curr = currency.__read(__is);
        period = __is.readFloat();
        __inS.endReadParams();
        double __ret = __obj.getCreditCostInForeignCurrency(amount, curr, period, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeDouble(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "getAccessKey",
        "getAccountInfo",
        "getCreditCostInForeignCurrency",
        "getCreditCostInNativeCurrency",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "isClientAllowedToGetCredit",
        "isPremiumAccount"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _AccountDisp.___getAccessKey(this, in, __current);
            }
            case 1:
            {
                return _AccountDisp.___getAccountInfo(this, in, __current);
            }
            case 2:
            {
                return ___getCreditCostInForeignCurrency(this, in, __current);
            }
            case 3:
            {
                return ___getCreditCostInNativeCurrency(this, in, __current);
            }
            case 4:
            {
                return ___ice_id(this, in, __current);
            }
            case 5:
            {
                return ___ice_ids(this, in, __current);
            }
            case 6:
            {
                return ___ice_isA(this, in, __current);
            }
            case 7:
            {
                return ___ice_ping(this, in, __current);
            }
            case 8:
            {
                return ___isClientAllowedToGetCredit(this, in, __current);
            }
            case 9:
            {
                return _AccountDisp.___isPremiumAccount(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
