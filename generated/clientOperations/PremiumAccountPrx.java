// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `client.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package clientOperations;

public interface PremiumAccountPrx extends AccountPrx
{
    public boolean isClientAllowedToGetCredit(int amount, currency curr, float period);

    public boolean isClientAllowedToGetCredit(int amount, currency curr, float period, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_isClientAllowedToGetCredit(int amount, currency curr, float period);

    public Ice.AsyncResult begin_isClientAllowedToGetCredit(int amount, currency curr, float period, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_isClientAllowedToGetCredit(int amount, currency curr, float period, Ice.Callback __cb);

    public Ice.AsyncResult begin_isClientAllowedToGetCredit(int amount, currency curr, float period, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_isClientAllowedToGetCredit(int amount, currency curr, float period, Callback_PremiumAccount_isClientAllowedToGetCredit __cb);

    public Ice.AsyncResult begin_isClientAllowedToGetCredit(int amount, currency curr, float period, java.util.Map<String, String> __ctx, Callback_PremiumAccount_isClientAllowedToGetCredit __cb);

    public boolean end_isClientAllowedToGetCredit(Ice.AsyncResult __result);

    public double getCreditCostInNativeCurrency(int amount, currency curr, float period);

    public double getCreditCostInNativeCurrency(int amount, currency curr, float period, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getCreditCostInNativeCurrency(int amount, currency curr, float period);

    public Ice.AsyncResult begin_getCreditCostInNativeCurrency(int amount, currency curr, float period, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getCreditCostInNativeCurrency(int amount, currency curr, float period, Ice.Callback __cb);

    public Ice.AsyncResult begin_getCreditCostInNativeCurrency(int amount, currency curr, float period, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getCreditCostInNativeCurrency(int amount, currency curr, float period, Callback_PremiumAccount_getCreditCostInNativeCurrency __cb);

    public Ice.AsyncResult begin_getCreditCostInNativeCurrency(int amount, currency curr, float period, java.util.Map<String, String> __ctx, Callback_PremiumAccount_getCreditCostInNativeCurrency __cb);

    public double end_getCreditCostInNativeCurrency(Ice.AsyncResult __result);

    public double getCreditCostInForeignCurrency(int amount, currency curr, float period);

    public double getCreditCostInForeignCurrency(int amount, currency curr, float period, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getCreditCostInForeignCurrency(int amount, currency curr, float period);

    public Ice.AsyncResult begin_getCreditCostInForeignCurrency(int amount, currency curr, float period, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getCreditCostInForeignCurrency(int amount, currency curr, float period, Ice.Callback __cb);

    public Ice.AsyncResult begin_getCreditCostInForeignCurrency(int amount, currency curr, float period, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getCreditCostInForeignCurrency(int amount, currency curr, float period, Callback_PremiumAccount_getCreditCostInForeignCurrency __cb);

    public Ice.AsyncResult begin_getCreditCostInForeignCurrency(int amount, currency curr, float period, java.util.Map<String, String> __ctx, Callback_PremiumAccount_getCreditCostInForeignCurrency __cb);

    public double end_getCreditCostInForeignCurrency(Ice.AsyncResult __result);
}
